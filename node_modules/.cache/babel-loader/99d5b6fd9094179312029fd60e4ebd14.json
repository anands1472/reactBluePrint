{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\officeRepo\\\\reactBluePrint\\\\src\\\\components\\\\Main\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Table from \"../Table\";\nimport Dropdown from \"../Dropdown\";\nimport Search from \"../Search\";\nimport { STATES } from \"./constants/states\";\nimport { GENRES } from \"./constants/genres\";\n\nconst Main = ({\n  reduxUsaData,\n  usaDataInfo,\n  usaData\n}) => {\n  _s();\n\n  const [restaurants, setRestaurants] = useState([]);\n  const [displayRestaurants, setDisplayRestaurants] = useState([]);\n  const [activeState, setActiveState] = useState(\"\");\n  const [activeGenre, setActiveGenre] = useState(\"\");\n  const [activeQuery, setActiveQuery] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [incomeingData, setIncomeingData] = useState(usaDataInfo && usaDataInfo); // const getRestaurants = async () => {\n  //   setIsLoading(true);\n  //   // const response = await fetch(\n  //   //   \"https://code-challenge.spectrumtoolbox.com/api/restaurants\",\n  //   //   {\n  //   //     headers: {\n  //   //       Authorization: \"Api-Key q3MNxtfep8Gt\",\n  //   //     },\n  //   //   }\n  //   // );\n  //   await reduxUsaData();\n  //   setIsLoading(true);\n  // };\n\n  console.log(\"incomeingData==============\", incomeingData && incomeingData);\n  useEffect(() => {\n    setIncomeingData(usaDataInfo);\n  }, [usaDataInfo && usaDataInfo]);\n  const deepCopy = usaDataInfo && usaDataInfo; // useEffect(() => {\n  //   const data = usaDataInfo;\n  //   setIsLoading(false);\n  //   const alphabetizedData = data.sort((a, b) => (a.name > b.name ? 1 : -1));\n  //   setRestaurants(alphabetizedData);\n  //   setDisplayRestaurants(alphabetizedData);\n  // }, [deepCopy && deepCopy]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      const data = incomeingData;\n      setIsLoading(false);\n      const alphabetizedData = data.sort((a, b) => a.name > b.name ? 1 : -1);\n      console.log(\"alphabetizedData\", alphabetizedData);\n      setRestaurants(alphabetizedData);\n      setDisplayRestaurants(alphabetizedData);\n    }, 1000); // return () => clearTimeout(timer);\n  }, []);\n\n  const handleSelect = e => {\n    const targetValue = e.target.value;\n    const category = e.target.name.toLowerCase();\n\n    if (category === \"state\") {\n      setActiveState(targetValue);\n    } else if (category === \"genre\") {\n      setActiveGenre(targetValue);\n    }\n  };\n\n  const formHandler = value => {\n    let normalizedValue = value.toLowerCase();\n    setActiveQuery(normalizedValue);\n  };\n\n  const clearSearch = () => {\n    setActiveState(\"\");\n    setActiveGenre(\"\");\n    setActiveQuery(\"\");\n  };\n\n  const filterState = restaurant => {\n    if (activeState) {\n      return restaurant.state === activeState;\n    } else {\n      return restaurant;\n    }\n  };\n\n  const filterGenre = restaurant => {\n    if (activeGenre) {\n      return restaurant.genre.toLowerCase().includes(activeGenre);\n    } else {\n      return restaurant;\n    }\n  };\n\n  const filterSearch = restaurant => {\n    if (activeQuery) {\n      let normalizedName = restaurant.name.toLowerCase();\n      let normalizedCity = restaurant.city.toLowerCase();\n      let normalizedGenre = restaurant.genre.toLowerCase();\n\n      if (normalizedName.includes(activeQuery) || normalizedCity.includes(activeQuery) || normalizedGenre.includes(activeQuery)) {\n        return restaurant;\n      }\n    } else {\n      return restaurant;\n    }\n  };\n\n  useEffect(() => {\n    let result = restaurants.filter(filterState);\n    result = result.filter(filterGenre);\n    result = result.filter(filterSearch);\n    setDisplayRestaurants(result);\n  }, [activeState, activeGenre, activeQuery]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      formHandler: formHandler,\n      clearSearch: clearSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n      name: \"State\",\n      opts: STATES,\n      selectHandler: handleSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n      name: \"Genre\",\n      opts: GENRES,\n      selectHandler: handleSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      props: displayRestaurants\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isLoading ? \"LOADING....\" : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Main, \"YtPse1LIQxJULWje2cZ7Ild4VKY=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["D:/officeRepo/reactBluePrint/src/components/Main/index.js"],"names":["React","useState","useEffect","Table","Dropdown","Search","STATES","GENRES","Main","reduxUsaData","usaDataInfo","usaData","restaurants","setRestaurants","displayRestaurants","setDisplayRestaurants","activeState","setActiveState","activeGenre","setActiveGenre","activeQuery","setActiveQuery","isLoading","setIsLoading","incomeingData","setIncomeingData","console","log","deepCopy","timer","setTimeout","data","alphabetizedData","sort","a","b","name","handleSelect","e","targetValue","target","value","category","toLowerCase","formHandler","normalizedValue","clearSearch","filterState","restaurant","state","filterGenre","genre","includes","filterSearch","normalizedName","normalizedCity","city","normalizedGenre","result","filter"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,MAAT,QAAuB,oBAAvB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,WAAhB;AAA6BC,EAAAA;AAA7B,CAAD,KAA4C;AAAA;;AACvD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACa,kBAAD,EAAqBC,qBAArB,IAA8Cd,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACqB,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAM,CAACuB,aAAD,EAAgBC,gBAAhB,IAAoCxB,QAAQ,CAChDS,WAAW,IAAIA,WADiC,CAAlD,CARuD,CAWvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CH,aAAa,IAAIA,aAA5D;AAEAtB,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,gBAAgB,CAACf,WAAD,CAAhB;AACD,GAFQ,EAEN,CAACA,WAAW,IAAIA,WAAhB,CAFM,CAAT;AAIA,QAAMkB,QAAQ,GAAGlB,WAAW,IAAIA,WAAhC,CA/BuD,CAiCvD;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM2B,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC7B,YAAMC,IAAI,GAAGP,aAAb;AACAD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMS,gBAAgB,GAAGD,IAAI,CAACE,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAX,GAAkB,CAAlB,GAAsB,CAAC,CAA5C,CAAzB;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCK,gBAAhC;AACAnB,MAAAA,cAAc,CAACmB,gBAAD,CAAd;AACAjB,MAAAA,qBAAqB,CAACiB,gBAAD,CAArB;AACD,KAPuB,EAOrB,IAPqB,CAAxB,CADc,CASd;AACD,GAVQ,EAUN,EAVM,CAAT;;AAYA,QAAMK,YAAY,GAAIC,CAAD,IAAO;AAC1B,UAAMC,WAAW,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA7B;AACA,UAAMC,QAAQ,GAAGJ,CAAC,CAACE,MAAF,CAASJ,IAAT,CAAcO,WAAd,EAAjB;;AACA,QAAID,QAAQ,KAAK,OAAjB,EAA0B;AACxBzB,MAAAA,cAAc,CAACsB,WAAD,CAAd;AACD,KAFD,MAEO,IAAIG,QAAQ,KAAK,OAAjB,EAA0B;AAC/BvB,MAAAA,cAAc,CAACoB,WAAD,CAAd;AACD;AACF,GARD;;AAUA,QAAMK,WAAW,GAAIH,KAAD,IAAW;AAC7B,QAAII,eAAe,GAAGJ,KAAK,CAACE,WAAN,EAAtB;AACAtB,IAAAA,cAAc,CAACwB,eAAD,CAAd;AACD,GAHD;;AAKA,QAAMC,WAAW,GAAG,MAAM;AACxB7B,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAJD;;AAMA,QAAM0B,WAAW,GAAIC,UAAD,IAAgB;AAClC,QAAIhC,WAAJ,EAAiB;AACf,aAAOgC,UAAU,CAACC,KAAX,KAAqBjC,WAA5B;AACD,KAFD,MAEO;AACL,aAAOgC,UAAP;AACD;AACF,GAND;;AAQA,QAAME,WAAW,GAAIF,UAAD,IAAgB;AAClC,QAAI9B,WAAJ,EAAiB;AACf,aAAO8B,UAAU,CAACG,KAAX,CAAiBR,WAAjB,GAA+BS,QAA/B,CAAwClC,WAAxC,CAAP;AACD,KAFD,MAEO;AACL,aAAO8B,UAAP;AACD;AACF,GAND;;AAQA,QAAMK,YAAY,GAAIL,UAAD,IAAgB;AACnC,QAAI5B,WAAJ,EAAiB;AACf,UAAIkC,cAAc,GAAGN,UAAU,CAACZ,IAAX,CAAgBO,WAAhB,EAArB;AACA,UAAIY,cAAc,GAAGP,UAAU,CAACQ,IAAX,CAAgBb,WAAhB,EAArB;AACA,UAAIc,eAAe,GAAGT,UAAU,CAACG,KAAX,CAAiBR,WAAjB,EAAtB;;AACA,UACEW,cAAc,CAACF,QAAf,CAAwBhC,WAAxB,KACAmC,cAAc,CAACH,QAAf,CAAwBhC,WAAxB,CADA,IAEAqC,eAAe,CAACL,QAAhB,CAAyBhC,WAAzB,CAHF,EAIE;AACA,eAAO4B,UAAP;AACD;AACF,KAXD,MAWO;AACL,aAAOA,UAAP;AACD;AACF,GAfD;;AAiBA9C,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIwD,MAAM,GAAG9C,WAAW,CAAC+C,MAAZ,CAAmBZ,WAAnB,CAAb;AACAW,IAAAA,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcT,WAAd,CAAT;AACAQ,IAAAA,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcN,YAAd,CAAT;AACAtC,IAAAA,qBAAqB,CAAC2C,MAAD,CAArB;AACD,GALQ,EAKN,CAAC1C,WAAD,EAAcE,WAAd,EAA2BE,WAA3B,CALM,CAAT;AAOA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAEwB,WAArB;AAAkC,MAAA,WAAW,EAAEE;AAA/C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAE,OAAhB;AAAyB,MAAA,IAAI,EAAExC,MAA/B;AAAuC,MAAA,aAAa,EAAE+B;AAAtD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAE,OAAhB;AAAyB,MAAA,IAAI,EAAE9B,MAA/B;AAAuC,MAAA,aAAa,EAAE8B;AAAtD;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEvB;AAAd;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAA,gBAAKQ,SAAS,GAAG,aAAH,GAAmB;AAAjC;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AASD,CA5HD;;GAAMd,I;;KAAAA,I;AA8HN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Table from \"../Table\";\r\nimport Dropdown from \"../Dropdown\";\r\nimport Search from \"../Search\";\r\nimport { STATES } from \"./constants/states\";\r\nimport { GENRES } from \"./constants/genres\";\r\n\r\nconst Main = ({ reduxUsaData, usaDataInfo, usaData }) => {\r\n  const [restaurants, setRestaurants] = useState([]);\r\n  const [displayRestaurants, setDisplayRestaurants] = useState([]);\r\n  const [activeState, setActiveState] = useState(\"\");\r\n  const [activeGenre, setActiveGenre] = useState(\"\");\r\n  const [activeQuery, setActiveQuery] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const [incomeingData, setIncomeingData] = useState(\r\n    usaDataInfo && usaDataInfo\r\n  );\r\n  // const getRestaurants = async () => {\r\n  //   setIsLoading(true);\r\n  //   // const response = await fetch(\r\n  //   //   \"https://code-challenge.spectrumtoolbox.com/api/restaurants\",\r\n  //   //   {\r\n  //   //     headers: {\r\n  //   //       Authorization: \"Api-Key q3MNxtfep8Gt\",\r\n  //   //     },\r\n  //   //   }\r\n  //   // );\r\n\r\n  //   await reduxUsaData();\r\n  //   setIsLoading(true);\r\n  // };\r\n  console.log(\"incomeingData==============\", incomeingData && incomeingData);\r\n\r\n  useEffect(() => {\r\n    setIncomeingData(usaDataInfo);\r\n  }, [usaDataInfo && usaDataInfo]);\r\n\r\n  const deepCopy = usaDataInfo && usaDataInfo;\r\n\r\n  // useEffect(() => {\r\n\r\n  //   const data = usaDataInfo;\r\n  //   setIsLoading(false);\r\n  //   const alphabetizedData = data.sort((a, b) => (a.name > b.name ? 1 : -1));\r\n  //   setRestaurants(alphabetizedData);\r\n  //   setDisplayRestaurants(alphabetizedData);\r\n  // }, [deepCopy && deepCopy]);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      const data = incomeingData ;\r\n      setIsLoading(false);\r\n      const alphabetizedData = data.sort((a, b) => (a.name > b.name ? 1 : -1));\r\n      console.log(\"alphabetizedData\", alphabetizedData);\r\n      setRestaurants(alphabetizedData);\r\n      setDisplayRestaurants(alphabetizedData);\r\n    }, 1000);\r\n    // return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  const handleSelect = (e) => {\r\n    const targetValue = e.target.value;\r\n    const category = e.target.name.toLowerCase();\r\n    if (category === \"state\") {\r\n      setActiveState(targetValue);\r\n    } else if (category === \"genre\") {\r\n      setActiveGenre(targetValue);\r\n    }\r\n  };\r\n\r\n  const formHandler = (value) => {\r\n    let normalizedValue = value.toLowerCase();\r\n    setActiveQuery(normalizedValue);\r\n  };\r\n\r\n  const clearSearch = () => {\r\n    setActiveState(\"\");\r\n    setActiveGenre(\"\");\r\n    setActiveQuery(\"\");\r\n  };\r\n\r\n  const filterState = (restaurant) => {\r\n    if (activeState) {\r\n      return restaurant.state === activeState;\r\n    } else {\r\n      return restaurant;\r\n    }\r\n  };\r\n\r\n  const filterGenre = (restaurant) => {\r\n    if (activeGenre) {\r\n      return restaurant.genre.toLowerCase().includes(activeGenre);\r\n    } else {\r\n      return restaurant;\r\n    }\r\n  };\r\n\r\n  const filterSearch = (restaurant) => {\r\n    if (activeQuery) {\r\n      let normalizedName = restaurant.name.toLowerCase();\r\n      let normalizedCity = restaurant.city.toLowerCase();\r\n      let normalizedGenre = restaurant.genre.toLowerCase();\r\n      if (\r\n        normalizedName.includes(activeQuery) ||\r\n        normalizedCity.includes(activeQuery) ||\r\n        normalizedGenre.includes(activeQuery)\r\n      ) {\r\n        return restaurant;\r\n      }\r\n    } else {\r\n      return restaurant;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let result = restaurants.filter(filterState);\r\n    result = result.filter(filterGenre);\r\n    result = result.filter(filterSearch);\r\n    setDisplayRestaurants(result);\r\n  }, [activeState, activeGenre, activeQuery]);\r\n\r\n  return (\r\n    <>\r\n      <Search formHandler={formHandler} clearSearch={clearSearch} />\r\n      <Dropdown name={\"State\"} opts={STATES} selectHandler={handleSelect} />\r\n      <Dropdown name={\"Genre\"} opts={GENRES} selectHandler={handleSelect} />\r\n      <Table props={displayRestaurants} />\r\n      <h2>{isLoading ? \"LOADING....\" : \"\"}</h2>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}